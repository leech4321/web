<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three.js Cube Structure (Rotate + Zoom)</title>
    <style>
        body { margin: 0; overflow: hidden; background-color: #f0f0f0; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.160.0/build/three.module.js"
            }
        }
    </script>
    <script type="module">
        import * as THREE from 'three';

        let scene, camera, renderer;
        let cubeGroup;
        let isDragging = false;
        let previousMousePosition = { x: 0, y: 0 };

        // --- Zoom parameters ---
        const zoomSpeed = 0.1;
        const minZoomDistance = 2; // Minimum distance from origin
        const maxZoomDistance = 20; // Maximum distance from origin

        function init() {
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf0f0f0);

            const aspect = window.innerWidth / window.innerHeight;
            camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);
            camera.position.set(4, 3.5, 5);
            // Center the lookAt slightly better based on the centered model coordinates
            // The model's Y center is 0 (from -0.5 to 0.5 offset)
            camera.lookAt(0, 0, 0); // Look at the center of the group

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
            directionalLight.position.set(5, 10, 7.5);
            scene.add(directionalLight);

            cubeGroup = new THREE.Group();
            scene.add(cubeGroup);

            const materials = [
                new THREE.MeshStandardMaterial({ color: 0xffff00 }), // Right (+x)
                new THREE.MeshStandardMaterial({ color: 0xffff00 }), // Left (-x)
                new THREE.MeshStandardMaterial({ color: 0xff0000 }), // Top (+y)
                new THREE.MeshStandardMaterial({ color: 0xff0000 }), // Bottom (-y)
                new THREE.MeshStandardMaterial({ color: 0x0000ff }), // Front (+z)
                new THREE.MeshStandardMaterial({ color: 0x0000ff })  // Back (-z)
            ];

            const geometry = new THREE.BoxGeometry(1, 1, 1);

            const cubePositionsRaw = [
                 // Back Layer (Z=0)
                 [0, 0, 0], [1, 0, 0], [2, 0, 0], [0, 1, 0], [1, 1, 0],
                 // Middle Layer (Z=1)
                 [0, 0, 1], [1, 0, 1], [2, 0, 1],
                 // Front Layer (Z=2)
                 [0, 0, 2], [2, 0, 2]
            ];

             const centerOffsetX = -1.0;
             const centerOffsetY = -0.5; // Base is Y=0, Top is Y=1, Center is 0.5. Offset is -0.5
             const centerOffsetZ = -1.0;

             const cubePositions = cubePositionsRaw.map(pos => [
                 pos[0] + centerOffsetX,
                 pos[1] + centerOffsetY,
                 pos[2] + centerOffsetZ
             ]);

            cubePositions.forEach(pos => {
                const cube = new THREE.Mesh(geometry, materials);
                cube.position.set(pos[0], pos[1], pos[2]);

                const edges = new THREE.EdgesGeometry( geometry );
                const lineMaterial = new THREE.LineBasicMaterial( { color: 0x333333, linewidth: 2 } );
                const lineSegments = new THREE.LineSegments( edges, lineMaterial );
                cube.add( lineSegments );

                cubeGroup.add(cube);
            });

            // --- Event Listeners ---
            renderer.domElement.addEventListener('mousedown', onMouseDown, false);
            renderer.domElement.addEventListener('mousemove', onMouseMove, false);
            renderer.domElement.addEventListener('mouseup', onMouseUp, false);
            renderer.domElement.addEventListener('mouseleave', onMouseUp, false);
            // Add wheel listener for zoom
            renderer.domElement.addEventListener('wheel', onMouseWheel, false);
            window.addEventListener('resize', onWindowResize, false);

            animate();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function onMouseDown(event) {
            isDragging = true;
            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        }

        function onMouseMove(event) {
            if (!isDragging) return;

            const deltaX = event.clientX - previousMousePosition.x;
            const deltaY = event.clientY - previousMousePosition.y;
            const rotationSpeed = 0.007;

            // Rotate around world axes for simplicity
            cubeGroup.rotateOnWorldAxis(new THREE.Vector3(0, 1, 0), deltaX * rotationSpeed);
            cubeGroup.rotateOnWorldAxis(new THREE.Vector3(1, 0, 0), deltaY * rotationSpeed);

            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        }

        function onMouseUp() {
            isDragging = false;
        }

        // --- Mouse Wheel Handler for Zoom ---
        function onMouseWheel(event) {
            event.preventDefault(); // Prevent default page scrolling

            // Determine zoom direction (deltaY < 0 is zoom in, > 0 is zoom out)
            const zoomFactor = (event.deltaY < 0) ? (1 - zoomSpeed) : (1 + zoomSpeed);

            // Calculate current distance and new distance
            let currentDistance = camera.position.length();
            let newDistance = currentDistance * zoomFactor;

            // Clamp the new distance to min/max bounds
            newDistance = Math.max(minZoomDistance, Math.min(maxZoomDistance, newDistance));

            // Apply the new distance by scaling the camera's position vector
            // This keeps the camera pointing towards the origin (0,0,0)
            camera.position.setLength(newDistance);

            // Note: No need to call camera.updateProjectionMatrix() here for position change
        }
        // --- End Mouse Wheel Handler ---

        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }

        init();
    </script>
</body>
</html>