<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three.js Cube Model - Rotate & Zoom</title> {/* Title updated */}
    <style>
        body { margin: 0; overflow: hidden; background-color: #f0f0f0; }
        canvas { display: block; }
    </style>
</head>
<body>
    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js"
            }
        }
    </script>
    <script type="module">
        import * as THREE from 'three';

        let scene, camera, renderer;
        let modelGroup; // Group to hold all cubes for unified rotation
        let isDragging = false;
        let previousMousePosition = {
            x: 0,
            y: 0
        };

        // --- Zoom Control Variables ---
        const zoomSpeed = 0.001; // Adjusted speed for potentially smoother zoom
        const minZoomDistance = 1.5; // Minimum distance from origin
        const maxZoomDistance = 20;  // Maximum distance from origin
        // ---------------------------

        function init() {
            // 1. Scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf0f0f0); // Light grey background

            // 2. Camera
            const aspect = window.innerWidth / window.innerHeight;
            camera = new THREE.PerspectiveCamera(50, aspect, 0.1, 1000);
            camera.position.set(3.5, 3, 4.5);
            camera.lookAt(0, 0, 0); // Camera looks at the center where the group is

            // 3. Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            // 4. Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.7);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
            directionalLight.position.set(5, 10, 7.5);
            scene.add(directionalLight);

            // 5. Geometry and Materials
            const cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
            //const greyMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 }); // Grey
            const tanMaterial = new THREE.MeshStandardMaterial({ color: 0xD2B48C });  // Tan/Light Brown
            const brownMaterial = new THREE.MeshStandardMaterial({ color: 0xA0522D }); // Sienna

            // 6. Create the Model Group
            modelGroup = new THREE.Group();
            const cubesData = [
                // Layer 0 (y=0) - Bottom layer
                { x: 0, y: 0, z: 0, material: brownMaterial },
                { x: 1, y: 0, z: 0, material: brownMaterial },
                { x: 1, y: 0, z: 1, material: brownMaterial },
                { x: 2, y: 0, z: 1, material: brownMaterial },
                // Layer 1 (y=1) - Top layer
                { x: 0, y: 1, z: 0, material: brownMaterial },
                { x: 1, y: 1, z: 0, material: brownMaterial },
                { x: 1, y: 1, z: 1, material: brownMaterial },
                { x: 2, y: 1, z: 1, material: brownMaterial },
            ];

            // Calculate the geometric center for the 2-layer structure
            const centerOffset = new THREE.Vector3(-1, -0.5, -0.5); // Updated center offset

            cubesData.forEach(data => {
                const cube = new THREE.Mesh(cubeGeometry, data.material);
                cube.position.set(
                    data.x + centerOffset.x,
                    data.y + centerOffset.y,
                    data.z + centerOffset.z
                 );

                 // Add Edges (optional, for better definition)
                 const edges = new THREE.EdgesGeometry( cubeGeometry );
                 const lineMaterial = new THREE.LineBasicMaterial( { color: 0x333333, linewidth: 2 } ); // Darker edges
                 const lineSegments = new THREE.LineSegments( edges, lineMaterial );
                 cube.add( lineSegments );

                modelGroup.add(cube);
            });

            scene.add(modelGroup);
            // Camera already looks at (0,0,0) which is the group's center

            // 7. Event Listeners
            // Mouse Drag Rotation (Original Functionality)
            renderer.domElement.addEventListener('mousedown', onMouseDown, false);
            renderer.domElement.addEventListener('mousemove', onMouseMove, false);
            renderer.domElement.addEventListener('mouseup', onMouseUp, false);
            renderer.domElement.addEventListener('mouseleave', onMouseUp, false); // Stop dragging if mouse leaves canvas

            // --- Mouse Wheel Zoom (Added Functionality) ---
            renderer.domElement.addEventListener('wheel', onMouseWheel, { passive: false }); // Use passive: false if preventDefault is needed
            // ---------------------------------------------

            // Handle window resize
            window.addEventListener('resize', onWindowResize, false);

            // Start animation loop
            animate();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // --- Functions for Mouse Drag Rotation (Original) ---
        function onMouseDown(event) {
            isDragging = true;
            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        }

        function onMouseMove(event) {
            if (!isDragging) return;

            const deltaMove = {
                x: event.clientX - previousMousePosition.x,
                y: event.clientY - previousMousePosition.y
            };

            const rotationSpeed = 0.005; // Keep original rotation speed

            // --- Original Rotation Logic ---
            // Apply rotation directly based on mouse delta.
            // Note: This rotates around the group's local axes.
            modelGroup.rotateOnWorldAxis(new THREE.Vector3(0, 1, 0), toRadians(deltaMove.x * rotationSpeed * 100)); // Yaw
            modelGroup.rotateOnWorldAxis(new THREE.Vector3(1, 0, 0), toRadians(deltaMove.y * rotationSpeed * 100)); // Pitch
            //---------------------------------

            previousMousePosition.x = event.clientX;
            previousMousePosition.y = event.clientY;
        }


        function onMouseUp(event) {
            isDragging = false;
        }
        // --- End Rotation Functions ---


        // --- Mouse Wheel Zoom Function (Added) ---
        function onMouseWheel(event) {
            // preventDefault is important to stop the page from scrolling when zooming the canvas
            event.preventDefault();

            // Calculate direction vector: camera's current view direction
            const direction = new THREE.Vector3();
            camera.getWorldDirection(direction);

            // Determine zoom amount based on scroll delta (deltaY)
            // Negative deltaY (scroll up) should zoom in (move camera closer)
            // Positive deltaY (scroll down) should zoom out (move camera further)
            // We multiply by -zoomSpeed to achieve this.
            const zoomAmount = event.deltaY * zoomSpeed; // *Removed negative sign here* - let's test common wheel behavior
                                                          // deltaY > 0 (scroll down) -> positive zoomAmount -> move camera *further*
                                                          // deltaY < 0 (scroll up) -> negative zoomAmount -> move camera *closer*


            // Calculate potential new position by moving along the view direction
            // A positive zoomAmount moves further, negative moves closer.
            const newPosition = camera.position.clone().addScaledVector(direction, zoomAmount);

            // Calculate distance from origin for the new position
            const newDistance = newPosition.length(); // Distance from (0,0,0)

            // Apply zoom only if within the defined min/max distance limits
            if (newDistance >= minZoomDistance && newDistance <= maxZoomDistance) {
                camera.position.copy(newPosition);
            } else if (newDistance < minZoomDistance) {
                // Clamp to minimum distance: Move camera to min distance along the vector from origin to camera
                const clampedPosition = camera.position.clone().normalize().multiplyScalar(minZoomDistance);
                camera.position.copy(clampedPosition);
            } else { // newDistance > maxZoomDistance
                // Clamp to maximum distance: Move camera to max distance along the vector from origin to camera
                const clampedPosition = camera.position.clone().normalize().multiplyScalar(maxZoomDistance);
                camera.position.copy(clampedPosition);
            }

            // Crucially, ensure the camera still looks at the center after zooming
            // This might be needed if clamping logic slightly alters the lookAt direction implicitly
             camera.lookAt(0, 0, 0); // Re-focus on the origin (model center)
        }
        // -----------------------------------------

        function toRadians(degrees) {
            return degrees * (Math.PI / 180);
        }

        function animate() {
            requestAnimationFrame(animate);
            // No changes needed here, rendering happens automatically
            renderer.render(scene, camera);
        }

        init();

    </script>
</body>
</html>