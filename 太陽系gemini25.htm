<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>互動式太陽系 3D 模型 (真實自轉/公轉比例)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body { margin: 0; overflow: hidden; background-color: #000; font-family: 'Inter', sans-serif; }
        canvas { display: block; width: 100%; height: 100%; } /* 確保 canvas 填滿空間 */
        #infoBox {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 8px;
            font-size: 14px;
            max-width: 250px; /* 限制最大寬度 */
            display: none; /* 初始隱藏 */
            z-index: 10; /* 確保在其他元素之上 */
        }
        #controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.6);
            padding: 10px 20px;
            border-radius: 8px;
            display: flex;
            flex-wrap: wrap; /* 允許換行 */
            justify-content: center; /* 置中 */
            align-items: center;
            gap: 15px;
            z-index: 10;
        }

        /* --- 修改按鈕預設和懸停顏色 --- */

        /* --- Active 狀態顏色不變 --- */
        button.active {
            background-color: #3182ce; /* bg-blue-600 */
        }

        #tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            pointer-events: none; /* 讓滑鼠事件穿透 */
            display: none; /* 初始隱藏 */
            white-space: nowrap; /* 防止文字換行 */
            z-index: 20; /* 最高層級 */
        }
        /* 軌道顏色說明樣式 */
        #legend {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 8px;
            font-size: 12px;
            z-index: 10;
            max-height: calc(100vh - 40px); /* 限制最大高度 */
            overflow-y: auto; /* 超出高度時顯示滾動條 */
        }
        #legend h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-weight: bold;
            border-bottom: 1px solid #ccc;
            padding-bottom: 5px;
        }
        #legend ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        #legend li {
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            cursor: pointer; /* 添加指針提示可點擊 */
            padding: 3px 5px; /* 增加點擊區域 */
            border-radius: 4px;
            transition: background-color 0.2s;
        }
         #legend li:hover {
             background-color: rgba(255, 255, 255, 0.2); /* 懸停效果 */
         }
        .color-box {
            width: 12px;
            height: 12px;
            margin-right: 8px;
            border: 1px solid #555;
            display: inline-block;
            flex-shrink: 0; /* 防止顏色塊被壓縮 */
        }
        /* 速度滑桿樣式 */
        #speedControlContainer {
            display: flex;
            align-items: center;
            color: white;
            font-size: 12px;
            margin-top: 5px; /* 與按鈕稍微間隔 */
            width: 100%; /* 讓容器佔滿控制區寬度 */
            justify-content: center; /* 置中內部元素 */
        }
        #speedSlider {
            width: 150px; /* 滑桿寬度 */
            margin: 0 10px;
            cursor: pointer;
            accent-color: #3182ce; /* 滑桿顏色 */
        }

    </style>
</head>
<body>
    <div id="infoBox">
        <h3 id="infoName" class="font-bold text-lg mb-2">行星名稱</h3>
        <p id="infoDesc">這裡是行星的相關資訊。</p>
        <p id="infoTilt" class="mt-2 text-sm"></p>
        <p id="infoOrbit" class="mt-1 text-sm"></p> <p id="infoRotation" class="mt-1 text-sm"></p> <button id="closeInfoBox" class="mt-3 bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-2 rounded text-xs">關閉</button>
    </div>

    <div id="tooltip"></div>

<div id="controls">
    <button id="toggleOrbits" class="bg-gray-500 hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300">顯示/隱藏軌道</button>
    <button id="toggleRotation" class="bg-gray-500 hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300">暫停/啟動自轉</button>
    <button id="toggleRevolution" class="bg-gray-500 hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300">暫停/啟動公轉</button>
    <button id="resetViewButton" class="bg-gray-500 hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300">重設視角</button>
    <div id="speedControlContainer">
        <label for="speedSlider">公轉速度:</label>
        <input type="range" id="speedSlider" min="0.1" max="10" step="0.1" value="1">
        <span id="speedValue" class="ml-2">x1.0</span>
    </div>
</div>

    <div id="legend">
        <h3>圖例 (點擊縮放/跟隨)</h3>
        <ul id="legendList">
        </ul>
    </div>

    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js",
                "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/"
            }
        }
    </script>
    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

        // --- 基本設定 (Basic Setup) ---
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.body.appendChild(renderer.domElement);

        // --- 光照 (Lighting) ---
        const ambientLight = new THREE.AmbientLight(0x333333);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 3, 0, 0); // 強度調整為 3
        scene.add(pointLight);

        // --- 控制器 (Controls) ---
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.screenSpacePanning = false;
        controls.minDistance = 5;
        controls.maxDistance = 1000;

        // --- 行星和軌道數據 (Planet and Orbit Data) ---
        const earthSizeScale = 1; // 地球尺寸作為基準
        // 行星相對地球的大小比例 (近似值)
        const planetSizes = {
            mercury: 0.383, venus: 0.949, earth: 1.0, mars: 0.532,
            jupiter: 11.21, saturn: 9.45, uranus: 4.01, neptune: 3.88, pluto: 0.186 // 冥王星現在是矮行星
        };
        const earthBaseSpeed = 0.001; // 地球公轉基礎速度 (代表每年公轉多少弧度 @ speed x1)

        // --- 行星數據 (包含實際週期) ---
        // rotationPeriodDays: 恆星自轉週期 (地球日), 負數代表逆向
        // orbitPeriodDays:   公轉週期 (地球日)
        const planetData = [
             { name: '水星', name_en: 'Mercury', color: 0xaaaaaa, size: planetSizes.mercury * earthSizeScale, orbitRadius: 15, baseOrbitSpeed: earthBaseSpeed * (365.25 / 87.97),  axialTilt: 0.03, rotationPeriodDays: 58.65,  orbitPeriodDays: 87.97,  info: '離太陽最近的行星。' },
             { name: '金星', name_en: 'Venus',   color: 0xffe484, size: planetSizes.venus * earthSizeScale,   orbitRadius: 25, baseOrbitSpeed: earthBaseSpeed * (365.25 / 224.7), axialTilt: 177.4, rotationPeriodDays: -243.02, orbitPeriodDays: 224.7,  info: '擁有濃厚的大氣層，表面溫度極高，逆向自轉。' },
             { name: '地球', name_en: 'Earth',   color: 0x4d91ff, size: planetSizes.earth * earthSizeScale,   orbitRadius: 35, baseOrbitSpeed: earthBaseSpeed * (365.25 / 365.25),axialTilt: 23.44, rotationPeriodDays: 0.997,   orbitPeriodDays: 365.25, info: '目前已知唯一有生命的行星，軸傾角造成四季變化。' },
             { name: '火星', name_en: 'Mars',    color: 0xff5733, size: planetSizes.mars * earthSizeScale,    orbitRadius: 50, baseOrbitSpeed: earthBaseSpeed * (365.25 / 686.98), axialTilt: 25.19, rotationPeriodDays: 1.026,   orbitPeriodDays: 686.98, info: '被稱為「紅色行星」，表面有鐵鏽。' },
             { name: '木星', name_en: 'Jupiter', color: 0xffca8a, size: planetSizes.jupiter * earthSizeScale, orbitRadius: 80, baseOrbitSpeed: earthBaseSpeed * (365.25 / 4332.59),axialTilt: 3.13,  rotationPeriodDays: 0.414,   orbitPeriodDays: 4332.59,info: '太陽系中最大的行星，是氣態巨行星。' },
             { name: '土星', name_en: 'Saturn',  color: 0xf4d0a0, size: planetSizes.saturn * earthSizeScale,  orbitRadius: 120, baseOrbitSpeed: earthBaseSpeed * (365.25 / 10759.22), axialTilt: 26.73, rotationPeriodDays: 0.444,   orbitPeriodDays: 10759.22, info: '以其美麗的行星環而聞名。', hasRing: true },
             { name: '天王星', name_en: 'Uranus', color: 0xafdbf5, size: planetSizes.uranus * earthSizeScale,  orbitRadius: 160, baseOrbitSpeed: earthBaseSpeed * (365.25 / 30688.5),  axialTilt: 97.77, rotationPeriodDays: 0.718,   orbitPeriodDays: 30688.5, info: '躺著自轉的冰巨行星。' }, // Rotation period often given as -0.718 due to pole def, but magnitude is key here. Tilt handles orientation.
             { name: '海王星', name_en: 'Neptune', color: 0x5b5dff, size: planetSizes.neptune * earthSizeScale, orbitRadius: 200, baseOrbitSpeed: earthBaseSpeed * (365.25 / 60182),   axialTilt: 28.32, rotationPeriodDays: 0.671,   orbitPeriodDays: 60182,   info: '最遠的氣態巨行星，呈藍色。' },
             { name: '冥王星', name_en: 'Pluto',  color: 0xcccccc, size: planetSizes.pluto * earthSizeScale,   orbitRadius: 240, baseOrbitSpeed: earthBaseSpeed * (365.25 / 90560),   axialTilt: 119.6, rotationPeriodDays: -6.387,  orbitPeriodDays: 90560,   info: '一顆位於柯伊伯帶的矮行星，逆向自轉。' } // 矮行星
        ];

        const planets = [];
        const orbitPaths = [];
        const planetOrbitContainers = [];
        const planetMeshes = {};
        const axisHelpers = []; // Array to hold axis helpers

        // --- 創建太陽 (Create Sun) ---
        const sunGeometry = new THREE.SphereGeometry(5, 32, 32);
        const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00, map: createSunTexture() });
        const sun = new THREE.Mesh(sunGeometry, sunMaterial);
        sun.userData = { name: '太陽', name_en: 'Sun', info: '太陽系的中心恆星。' };
        scene.add(sun);
        planets.push(sun); // Add sun to the interactable objects list
        planetMeshes['太陽'] = sun;

        // --- 創建行星和軌道 (Create Planets and Orbits) ---
        const legendUl = document.getElementById('legendList');
        planetData.forEach(data => {
            const orbitContainer = new THREE.Object3D();
            scene.add(orbitContainer);
            planetOrbitContainers.push(orbitContainer);

            const geometry = new THREE.SphereGeometry(data.size, 32, 32);
            const material = new THREE.MeshLambertMaterial({ color: data.color });
            const planet = new THREE.Mesh(geometry, material);
            planet.position.x = data.orbitRadius; // Position relative to orbit container

            // Apply Axial Tilt
            const tiltRadians = THREE.MathUtils.degToRad(data.axialTilt || 0);
            planet.rotation.z = tiltRadians; // Set tilt first

            // Add Axis Helper
            const axisLength = data.size * 2.5;
            const axisGeometry = new THREE.CylinderGeometry(0.02 * data.size, 0.02 * data.size, axisLength, 6);
            const axisMaterial = new THREE.MeshBasicMaterial({
                color: 0xffffff,
                transparent: true,
                opacity: 0.4
            });
            const axisHelper = new THREE.Mesh(axisGeometry, axisMaterial);
            // No rotation needed for axisHelper itself, it aligns with planet's local Y before tilt
            planet.add(axisHelper); // Add helper as child *after* tilt is potentially set (though cylinder default is Y aligned)
            axisHelper.userData.isAxisHelper = true;
            axisHelpers.push(axisHelper);


            planet.userData = { ...data, isPlanet: true }; // Store data in userData
            planetMeshes[data.name] = planet; // Map name to mesh for easy access

            // Add ring for Saturn
            if (data.hasRing) {
                const ringGeometry = new THREE.RingGeometry(data.size * 1.2, data.size * 1.8, 32);
                const ringMaterial = new THREE.MeshBasicMaterial({ color: 0xaaaaaa, side: THREE.DoubleSide, opacity: 0.6, transparent: true });
                const ring = new THREE.Mesh(ringGeometry, ringMaterial);
                // Ring should tilt with the planet's axial tilt.
                // Since the planet itself is tilted via rotation.z, and the ring is added as a child,
                // we just need to rotate the ring locally to be perpendicular to the planet's spin axis (local Y).
                // So rotate it 90 degrees around the local X axis.
                ring.rotation.x = Math.PI / 2;
                planet.add(ring);
                ring.userData.isRing = true;
            }

            orbitContainer.add(planet);
            planets.push(planet);

            // Create orbit path
            const orbitGeometry = new THREE.BufferGeometry();
            const points = [];
            const segments = 128;
            for (let i = 0; i <= segments; i++) {
                const theta = (i / segments) * Math.PI * 2;
                points.push(new THREE.Vector3(Math.cos(theta) * data.orbitRadius, 0, Math.sin(theta) * data.orbitRadius));
            }
            orbitGeometry.setFromPoints(points);
            const orbitMaterial = new THREE.LineBasicMaterial({ color: data.color, transparent: true, opacity: 0.5 });
            const orbit = new THREE.Line(orbitGeometry, orbitMaterial);
            orbit.userData.isOrbit = true;
            scene.add(orbit);
            orbitPaths.push(orbit);

             // Add to legend
             const li = document.createElement('li');
             li.dataset.planetName = data.name;
             const colorBox = document.createElement('span');
             colorBox.className = 'color-box';
             colorBox.style.backgroundColor = `#${data.color.toString(16).padStart(6, '0')}`;
             li.appendChild(colorBox);
             li.appendChild(document.createTextNode(data.name));
             legendUl.appendChild(li);
        });

        // --- 初始相機位置 (Initial Camera Position) ---
        const initialCameraPosition = new THREE.Vector3(0, 150, 250);
        const initialTargetPosition = new THREE.Vector3(0, 0, 0);
        camera.position.copy(initialCameraPosition);
        camera.lookAt(initialTargetPosition);
        controls.target.copy(initialTargetPosition);

        // --- 狀態變數 (State Variables) ---
        let isRotationPaused = false;
        let isRevolutionPaused = false;
        let areOrbitsVisible = true;
        let simulationSpeedMultiplier = 1.0;

        // --- 相機動畫與跟隨狀態 (Camera Animation & Following State) ---
        let isAnimatingCamera = false;
        let targetCameraPosition = new THREE.Vector3();
        let targetLookAtPosition = new THREE.Vector3();
        const animationDuration = 1.0; // seconds
        let animationElapsedTime = 0;
        let startCameraPositionForAnim = new THREE.Vector3();
        let startLookAtPositionForAnim = new THREE.Vector3();
        let followingPlanet = null;
        let followOffset = new THREE.Vector3(); // Offset relative to the planet's center

        // --- DOM 元素引用 (DOM Element References) ---
        const speedSlider = document.getElementById('speedSlider');
        const speedValueSpan = document.getElementById('speedValue');
        const tooltip = document.getElementById('tooltip');
        const resetButton = document.getElementById('resetViewButton');
        const infoBox = document.getElementById('infoBox');
        const infoName = document.getElementById('infoName');
        const infoDesc = document.getElementById('infoDesc');
        const infoTilt = document.getElementById('infoTilt');
        const infoOrbit = document.getElementById('infoOrbit');       // Get reference
        const infoRotation = document.getElementById('infoRotation'); // Get reference

        // --- 事件監聽器 (Event Listeners) ---
        window.addEventListener('resize', onWindowResize, false);
        renderer.domElement.addEventListener('click', onCanvasClick, false);
        renderer.domElement.addEventListener('mousemove', onMouseMove, false);
        document.getElementById('toggleOrbits').addEventListener('click', toggleOrbits);
        document.getElementById('toggleRotation').addEventListener('click', toggleRotation);
        document.getElementById('toggleRevolution').addEventListener('click', toggleRevolution);
        document.getElementById('closeInfoBox').addEventListener('click', hideInfoBox);
        speedSlider.addEventListener('input', onSpeedChange);
        legendUl.addEventListener('click', onLegendClick);
        resetButton.addEventListener('click', resetCameraView);

        // --- 滑鼠和射線投射器 (Mouse and Raycaster) ---
        const raycaster = new THREE.Raycaster();
        const mouse = new THREE.Vector2();
        let intersectedObject = null;

        // --- 動畫循環 (Animation Loop) ---
        const clock = new THREE.Clock();
        function animate() {
            requestAnimationFrame(animate);
            const delta = clock.getDelta(); // Time elapsed since last frame (seconds)

            // --- 行星動畫 (Planet Animation) ---
            planetOrbitContainers.forEach((container) => {
                const planet = container.children[0]; // Assumes planet is the first child
                if (!planet || !planet.userData || !planet.userData.isPlanet) return; // Skip if not a planet

                const data = planet.userData;
                let revolutionAmount = 0; // Initialize revolution amount for this frame
                let rotationAmount = 0; // Initialize rotation amount for this frame

                // Revolution (Orbit around Sun)
                if (!isRevolutionPaused) {
                    // Calculate the angle change for revolution based on base speed, multiplier, time delta, and a scaling factor for visibility
                    revolutionAmount = data.baseOrbitSpeed * simulationSpeedMultiplier * delta * 50; // 50 is an arbitrary scaling factor for visual speed
                    container.rotation.y += revolutionAmount;
                }

                // Rotation (Spin on axis) - MODIFIED LOGIC
                if (!isRotationPaused) {
                    // Check if we have the necessary data and non-zero rotation period
                    if (data.orbitPeriodDays && data.rotationPeriodDays && data.rotationPeriodDays !== 0 && revolutionAmount !== 0) {
                         // Calculate the real ratio of rotations per orbit
                        const realRatio = data.orbitPeriodDays / data.rotationPeriodDays;
                        // Calculate rotation amount based on the revolution amount and the real ratio
                        // This ensures the number of rotations per orbit remains constant and true to life, regardless of simulationSpeedMultiplier
                        rotationAmount = revolutionAmount * realRatio;
                        planet.rotation.y += rotationAmount; // Apply rotation around the planet's local Y-axis (which is tilted)
                    } else if (data.rotationPeriodDays === 0) {
                         // Handle non-rotating case if needed (e.g., tide-locked moon, though not present here)
                         planet.rotation.y = 0; // Or some initial orientation
                    } else if (revolutionAmount === 0 && data.rotationPeriodDays) {
                         // If revolution is paused but rotation isn't, we might want it to still rotate based on its period?
                         // This requires a different calculation based on absolute time if desired.
                         // For simplicity now, if revolution stops, linked rotation also stops calculation based on revolutionAmount.
                         // To make it rotate independently when revolution is paused:
                         // const baseRotationRate = (2 * Math.PI / data.rotationPeriodDays) * (earthBaseSpeed * 365.25); // Needs careful scaling factor derivation
                         // rotationAmount = baseRotationRate * simulationSpeedMultiplier * delta * 50; // Maybe apply multiplier here too? Or not? Decide consistency.
                         // For now: keep it simple, rotationAmount stays 0 if revolutionAmount is 0.
                    }
                }
            });

            // --- 攝影機與控制器更新 (Camera and Controls Update) ---
              if (isAnimatingCamera) {
                    // --- State 1: Zooming/Resetting Animation ---
                    controls.enabled = false; // Disable controls during animation
                    animationElapsedTime += delta;
                    const progress = Math.min(animationElapsedTime / animationDuration, 1);
                    const easeProgress = progress * (2 - progress); // Simple ease-out

                    camera.position.lerpVectors(startCameraPositionForAnim, targetCameraPosition, easeProgress);
                    controls.target.lerpVectors(startLookAtPositionForAnim, targetLookAtPosition, easeProgress);

                    if (progress >= 1) {
                        isAnimatingCamera = false;
                        camera.position.copy(targetCameraPosition); // Ensure exact final position
                        controls.target.copy(targetLookAtPosition); // Ensure exact final target
                    }
                    camera.lookAt(controls.target); // Keep looking at the interpolated target

              } else if (followingPlanet) {
                    // --- State 2: Following a Planet ---
                    controls.enabled = false; // Disable manual controls when following
                    const planetWorldPosition = new THREE.Vector3();
                    followingPlanet.getWorldPosition(planetWorldPosition); // Get current world position

                    const rotatedOffset = followOffset.clone();
                     if (followingPlanet.parent && followingPlanet.parent.isObject3D) { // Planet is child of orbit container
                         rotatedOffset.applyQuaternion(followingPlanet.parent.quaternion);
                     }

                    const targetCamPos = planetWorldPosition.clone().add(rotatedOffset);

                    // Smoothly move camera towards the target position
                    camera.position.lerp(targetCamPos, 0.1); // Adjust lerp factor for smoothness
                    // Keep looking at the planet's center
                    controls.target.copy(planetWorldPosition);
                    camera.lookAt(controls.target);

              } else {
                    // --- State 3: Free Orbit Controls ---
                    controls.enabled = true;
                    controls.update(); // Only update controls if not animating or following
              }

            // 渲染場景
            renderer.render(scene, camera);
        }

        // --- 工具函數 (Utility Functions) ---

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function getInteractableObject(object) {
             if (!object) return null;
             if (object.userData?.isPlanet || object.userData?.name === '太陽') {
                 return object;
             }
             // Check parents, but avoid infinite loops or going too high
             let parent = object.parent;
             let depth = 0;
             const maxDepth = 5; // Limit search depth
             while (parent && depth < maxDepth) {
                 if (parent.userData?.isPlanet || parent.userData?.name === '太陽') {
                     return parent;
                 }
                 // Stop if we hit the scene or an orbit container (don't want to select the container itself)
                 if (parent === scene || planetOrbitContainers.includes(parent)) {
                     break;
                 }
                 parent = parent.parent;
                 depth++;
             }
             return null;
        }


        function onCanvasClick(event) {
            if (isAnimatingCamera) return;

            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObjects(scene.children, true); // Check recursively

            if (intersects.length > 0) {
                 // Find the closest interactable object (planet or sun)
                 let clickedObject = null;
                 for (const intersect of intersects) {
                     // Ignore clicks on orbits, axis helpers, rings directly
                     if (intersect.object.userData.isOrbit || intersect.object.userData.isAxisHelper || intersect.object.userData.isRing) {
                         continue;
                     }
                     clickedObject = getInteractableObject(intersect.object);
                     if (clickedObject) break; // Found the planet/sun mesh or its parent container's mesh
                 }


                if (clickedObject && clickedObject.userData.name) {
                     if (clickedObject !== followingPlanet && clickedObject.userData.isPlanet) { // Can follow planets, not sun
                         zoomToPlanet(clickedObject);
                         showInfoBox(clickedObject.userData); // Show info on zoom
                     } else { // Clicked on followed planet or the sun
                         showInfoBox(clickedObject.userData);
                         if (clickedObject === sun) { // Clicking sun stops following
                             followingPlanet = null; // Stop following if sun is clicked
                         }
                     }
                } else {
                     // Clicked on empty space or non-interactable object
                     hideInfoBox();
                     // Optionally, stop following if background is clicked
                     // followingPlanet = null;
                     // resetCameraView(); // Or just stop following without resetting view immediately
                }
            } else {
                // Clicked on empty space
                hideInfoBox();
                // Optionally, stop following if background is clicked
                // followingPlanet = null;
                // resetCameraView();
            }
        }


        function onMouseMove(event) {
             mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
             mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
             raycaster.setFromCamera(mouse, camera);
             const intersects = raycaster.intersectObjects(scene.children, true); // Recursive check

             let currentTargetObject = null;
              if (intersects.length > 0) {
                 // Find the first object that represents a planet or sun
                  for (const intersect of intersects) {
                      // Ignore orbits, axes, rings for tooltip trigger
                      if (intersect.object.userData.isOrbit || intersect.object.userData.isAxisHelper || intersect.object.userData.isRing) {
                          continue;
                      }
                      currentTargetObject = getInteractableObject(intersect.object);
                      if (currentTargetObject) break;
                  }
             }

             if (currentTargetObject && currentTargetObject.userData.name) {
                 if (currentTargetObject !== intersectedObject) {
                     intersectedObject = currentTargetObject;
                     tooltip.textContent = intersectedObject.userData.name;
                     tooltip.style.left = `${event.clientX + 10}px`;
                     tooltip.style.top = `${event.clientY + 10}px`;
                     tooltip.style.display = 'block';
                 } else { // Still hovering over the same object, update position
                     tooltip.style.left = `${event.clientX + 10}px`;
                     tooltip.style.top = `${event.clientY + 10}px`;
                 }
             } else { // Not hovering over an interactable object
                 if (intersectedObject) { // If we were previously hovering
                     tooltip.style.display = 'none';
                 }
                 intersectedObject = null;
             }
        }

        function showInfoBox(data) {
            infoName.textContent = data.name;
            infoDesc.textContent = data.info || `關於 ${data.name} 的資訊。`;

            // Display Axial Tilt
            if (data.axialTilt !== undefined) {
                infoTilt.textContent = `軸傾角: ${data.axialTilt.toFixed(2)} 度`;
                infoTilt.style.display = 'block';
            } else {
                infoTilt.style.display = 'none';
            }

            // Display Orbit Period
            if (data.orbitPeriodDays !== undefined) {
                infoOrbit.textContent = `公轉週期: ${data.orbitPeriodDays.toFixed(2)} 地球日`;
                infoOrbit.style.display = 'block';
            } else {
                infoOrbit.style.display = 'none';
            }

            // Display Rotation Period
            if (data.rotationPeriodDays !== undefined) {
                const rotationText = (data.rotationPeriodDays < 0) ?
                     `自轉週期: ${(-data.rotationPeriodDays).toFixed(2)} 地球日 (逆行)` :
                     `自轉週期: ${data.rotationPeriodDays.toFixed(2)} 地球日`;
                infoRotation.textContent = rotationText;
                infoRotation.style.display = 'block';
            } else {
                infoRotation.style.display = 'none';
            }

            infoBox.style.display = 'block';
        }


        function hideInfoBox() {
            infoBox.style.display = 'none';
        }

        function toggleOrbits() {
            areOrbitsVisible = !areOrbitsVisible;
            orbitPaths.forEach(orbit => { orbit.visible = areOrbitsVisible; });
            document.getElementById('toggleOrbits').classList.toggle('active', areOrbitsVisible);
        }

        function toggleRotation() {
            isRotationPaused = !isRotationPaused;
            document.getElementById('toggleRotation').classList.toggle('active', !isRotationPaused);
        }

        function toggleRevolution() {
            isRevolutionPaused = !isRevolutionPaused;
            document.getElementById('toggleRevolution').classList.toggle('active', !isRevolutionPaused);
        }


        function onSpeedChange(event) {
            simulationSpeedMultiplier = parseFloat(event.target.value);
            speedValueSpan.textContent = `x${simulationSpeedMultiplier.toFixed(1)}`;
        }

        function onLegendClick(event) {
            const listItem = event.target.closest('li');
            if (listItem && listItem.dataset.planetName) {
                const planetName = listItem.dataset.planetName;
                const targetPlanet = planetMeshes[planetName];
                 if (targetPlanet && targetPlanet !== followingPlanet) {
                     zoomToPlanet(targetPlanet);
                     showInfoBox(targetPlanet.userData); // Show info on zoom
                 } else if (targetPlanet === followingPlanet) { // Clicked on already followed planet
                     showInfoBox(targetPlanet.userData); // Just show info again
                 }
            }
        }

        function zoomToPlanet(planetMesh) {
            if (!planetMesh || !planetMesh.userData.isPlanet) return; // Only zoom to planets

            const planetWorldPosition = new THREE.Vector3();
            planetMesh.getWorldPosition(planetWorldPosition);

            const planetRadius = planetMesh.geometry.parameters.radius || 1;
            // Adjust offset based on planet size - further away for larger planets
            const offsetDistance = planetRadius * 5 + 5; // Base distance + scale with radius
            const baseOffset = new THREE.Vector3(0, planetRadius * 1.5, offsetDistance); // Look slightly from above

            // Calculate target camera position relative to the planet's current position
            // The offset should ideally rotate with the orbit container for a stable view from "behind" the planet
            const targetOffset = baseOffset.clone();
            // Apply the orbit container's rotation to the offset vector
            if (planetMesh.parent && planetMesh.parent.isObject3D) { // parent should be the orbit container
                 targetOffset.applyQuaternion(planetMesh.parent.quaternion);
            }

            targetCameraPosition.copy(planetWorldPosition).add(targetOffset); // Target position in world space
            targetLookAtPosition.copy(planetWorldPosition); // Look at the planet's center

            // Store the *local* offset for the following state
            followOffset.copy(baseOffset);
            followingPlanet = planetMesh;
            startCameraAnimation();
        }


        function resetCameraView() {
            followingPlanet = null; // Stop following
            targetCameraPosition.copy(initialCameraPosition);
            targetLookAtPosition.copy(initialTargetPosition);
            startCameraAnimation();
        }

        function startCameraAnimation() {
            startCameraPositionForAnim.copy(camera.position);
            startLookAtPositionForAnim.copy(controls.target);
            isAnimatingCamera = true;
            animationElapsedTime = 0;
            hideInfoBox(); // Hide info box during camera transition
        }


        function createSunTexture() {
            const canvas = document.createElement('canvas');
            canvas.width = 64; canvas.height = 64;
            const context = canvas.getContext('2d');
            const gradient = context.createRadialGradient(32, 32, 0, 32, 32, 32);
            gradient.addColorStop(0, 'rgba(255, 255, 200, 1)'); // Core bright yellow/white
            gradient.addColorStop(0.5, 'rgba(255, 200, 0, 1)'); // Middle orange/yellow
            gradient.addColorStop(1, 'rgba(255, 150, 0, 0.8)'); // Outer orange, slightly transparent edge
            context.fillStyle = gradient;
            context.fillRect(0, 0, 64, 64);

            // Add some subtle noise/texture variation (optional)
            context.fillStyle = 'rgba(255, 255, 255, 0.2)'; // Brighter spots
            for (let i = 0; i < 15; i++) { context.beginPath(); context.arc(Math.random() * 64, Math.random() * 64, Math.random() * 1.2, 0, 2 * Math.PI); context.fill(); }
             context.fillStyle = 'rgba(200, 100, 0, 0.3)'; // Darker spots/granulation
            for (let i = 0; i < 10; i++) { context.beginPath(); context.arc(Math.random() * 64, Math.random() * 64, Math.random() * 1.8, 0, 2 * Math.PI); context.fill(); }


            const texture = new THREE.CanvasTexture(canvas);
            texture.needsUpdate = true;
            return texture;
        }

        // --- 初始化按鈕狀態和速度顯示 (Initialize Button States and Speed Display) ---
        document.getElementById('toggleOrbits').classList.toggle('active', areOrbitsVisible);
        document.getElementById('toggleRotation').classList.toggle('active', !isRotationPaused);
        document.getElementById('toggleRevolution').classList.toggle('active', !isRevolutionPaused);
        speedValueSpan.textContent = `x${parseFloat(speedSlider.value).toFixed(1)}`;
        simulationSpeedMultiplier = parseFloat(speedSlider.value);

        // --- 啟動動畫 (Start Animation) ---
        window.onload = function() {
             try {
                 animate();
             } catch(error) {
                 console.error("動畫啟動時發生錯誤 (Error starting animation):", error);
                 document.body.innerHTML = `<div style="color: red; padding: 20px; font-family: sans-serif;">啟動 3D 動畫時發生錯誤。請檢查瀏覽器控制台以獲取詳細資訊。<br>An error occurred while starting the 3D animation. Please check the browser console for details.</div>`;
             }
         }

    </script>
</body>
</html>
